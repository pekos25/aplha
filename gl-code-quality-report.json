[{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"e65b263ac0072d34718a15452ade8daf","location":{"path":".history/karma.conf_20200306165201.js","lines":{"begin":4,"end":32}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 34 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"2f266b45afc776b7907d2147f693e7cf","location":{"path":".history/karma.conf_20200309090626.js","lines":{"begin":4,"end":39}},"other_locations":[],"remediation_points":816000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"6209a6087dca0196dcfc0431bd8b58cb","location":{"path":".history/karma.conf_20200309090632.js","lines":{"begin":4,"end":38}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"914e7578af97b7177940524430f77485","location":{"path":".history/karma.conf_20200309091238.js","lines":{"begin":4,"end":32}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 28 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"d9ffb933e0f67f3441e714aec5b0732a","location":{"path":".history/karma.conf_20200309093345.js","lines":{"begin":4,"end":33}},"other_locations":[],"remediation_points":672000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"76e957df69cb203163ad0a5113302b5d","location":{"path":".history/karma.conf_20200313160006.js","lines":{"begin":4,"end":32}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 27 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"c10c3efbaf57d01f1989850535a64e78","location":{"path":".history/karma.conf_20200313160557.js","lines":{"begin":4,"end":32}},"other_locations":[],"remediation_points":648000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"cd2f7ec89b10b782e400fe647521bc3e","location":{"path":".history/karma.conf_20200313163226.js","lines":{"begin":4,"end":38}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"fe1c8024586e9f0d004203e5ad8976fa","location":{"path":".history/karma.conf_20200314112946.js","lines":{"begin":4,"end":38}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `init` has a Cognitive Complexity of 9 (exceeds 5 allowed). Consider refactoring.","fingerprint":"a9cbc88a7f724d7fe9f74fde8962612d","location":{"path":"coverage/alpha-frontend/block-navigation.js","lines":{"begin":2,"end":78}},"other_locations":[],"remediation_points":550000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `init` has 57 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"9abfe4b95044dea95ed2b83377a8d30f","location":{"path":"coverage/alpha-frontend/block-navigation.js","lines":{"begin":2,"end":78}},"other_locations":[],"remediation_points":1368000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_complexity","content":{"body":"# Cognitive Complexity\nCognitive Complexity is a measure of how difficult a unit of code is to intuitively understand. Unlike Cyclomatic Complexity, which determines how difficult your code will be to test, Cognitive Complexity tells you how difficult your code will be to read and comprehend.\n\n### A method's cognitive complexity is based on a few simple rules:\n* Code is not considered more complex when it uses shorthand that the language provides for collapsing multiple statements into one\n* Code is considered more complex for each \"break in the linear flow of the code\"\n* Code is considered more complex when \"flow breaking structures are nested\"\n\n### Further reading\n* [Cognitive Complexity docs](https://docs.codeclimate.com/v1.0/docs/cognitive-complexity)\n* [Cognitive Complexity: A new way of measuring understandability](https://www.sonarsource.com/docs/CognitiveComplexity.pdf)\n"},"description":"Function `addSorting` has a Cognitive Complexity of 38 (exceeds 5 allowed). Consider refactoring.","fingerprint":"14ee0031ebd6de634d14baa49389d3c3","location":{"path":"coverage/alpha-frontend/sorter.js","lines":{"begin":2,"end":168}},"other_locations":[],"remediation_points":3450000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `addSorting` has 138 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"b984f8c212bdcb355ee31a1193a08b95","location":{"path":"coverage/alpha-frontend/sorter.js","lines":{"begin":2,"end":168}},"other_locations":[],"remediation_points":3312000,"severity":"major","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `enableUI` has 26 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"8ea3edc277548aaadb89bf171e4cd55d","location":{"path":"coverage/alpha-frontend/sorter.js","lines":{"begin":126,"end":157}},"other_locations":[],"remediation_points":624000,"severity":"minor","type":"issue","engine_name":"structure"},{"categories":["Complexity"],"check_name":"method_lines","content":{"body":""},"description":"Function `exports` has 33 lines of code (exceeds 25 allowed). Consider refactoring.","fingerprint":"077f7a16ecf7fb104548a88c957a9290","location":{"path":"karma.conf.js","lines":{"begin":4,"end":38}},"other_locations":[],"remediation_points":792000,"severity":"minor","type":"issue","engine_name":"structure"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200309090632.js","lines":{"begin":4,"end":38}},"remediation_points":4950000,"other_locations":[{"path":".history/karma.conf_20200313163226.js","lines":{"begin":4,"end":38}},{"path":".history/karma.conf_20200314112946.js","lines":{"begin":4,"end":38}},{"path":"karma.conf.js","lines":{"begin":4,"end":38}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 200**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"80697f72a8d06dcfe5b7f0d585d4a3f6","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200313163226.js","lines":{"begin":4,"end":38}},"remediation_points":4950000,"other_locations":[{"path":".history/karma.conf_20200309090632.js","lines":{"begin":4,"end":38}},{"path":".history/karma.conf_20200314112946.js","lines":{"begin":4,"end":38}},{"path":"karma.conf.js","lines":{"begin":4,"end":38}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 200**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"f21ee608e1c795006593865cee3d1bfd","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200314112946.js","lines":{"begin":4,"end":38}},"remediation_points":4950000,"other_locations":[{"path":".history/karma.conf_20200309090632.js","lines":{"begin":4,"end":38}},{"path":".history/karma.conf_20200313163226.js","lines":{"begin":4,"end":38}},{"path":"karma.conf.js","lines":{"begin":4,"end":38}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 200**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2beb219e7b78578b860afab9f8106f05","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"karma.conf.js","lines":{"begin":4,"end":38}},"remediation_points":4950000,"other_locations":[{"path":".history/karma.conf_20200309090632.js","lines":{"begin":4,"end":38}},{"path":".history/karma.conf_20200313163226.js","lines":{"begin":4,"end":38}},{"path":".history/karma.conf_20200314112946.js","lines":{"begin":4,"end":38}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 200**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"1a608e79837eabd9d83a2525312708bc","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200306165201.js","lines":{"begin":4,"end":32}},"remediation_points":4230000,"other_locations":[{"path":".history/karma.conf_20200309091238.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160006.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160557.js","lines":{"begin":4,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"b23c0d3b16daf2f27df994714bad3253","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200309091238.js","lines":{"begin":4,"end":32}},"remediation_points":4230000,"other_locations":[{"path":".history/karma.conf_20200306165201.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160006.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160557.js","lines":{"begin":4,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"c679b65504898f09f8556df8b8b20712","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200313160006.js","lines":{"begin":4,"end":32}},"remediation_points":4230000,"other_locations":[{"path":".history/karma.conf_20200306165201.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200309091238.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160557.js","lines":{"begin":4,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"49ee0258413836daf17f5fc6b11a48f2","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/karma.conf_20200313160557.js","lines":{"begin":4,"end":32}},"remediation_points":4230000,"other_locations":[{"path":".history/karma.conf_20200306165201.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200309091238.js","lines":{"begin":4,"end":32}},{"path":".history/karma.conf_20200313160006.js","lines":{"begin":4,"end":32}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 176**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"a93f1ccc585e387153fed787547c5121","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/e2e/protractor.conf_20200313155445.js","lines":{"begin":10,"end":35}},"remediation_points":3960000,"other_locations":[{"path":".history/e2e/protractor.conf_20200313162718.js","lines":{"begin":10,"end":35}},{"path":".history/e2e/protractor.conf_20200314113104.js","lines":{"begin":10,"end":35}},{"path":"e2e/protractor.conf.js","lines":{"begin":10,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 167**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"be1d93059d277ba1b2840612c7a81714","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/e2e/protractor.conf_20200313162718.js","lines":{"begin":10,"end":35}},"remediation_points":3960000,"other_locations":[{"path":".history/e2e/protractor.conf_20200313155445.js","lines":{"begin":10,"end":35}},{"path":".history/e2e/protractor.conf_20200314113104.js","lines":{"begin":10,"end":35}},{"path":"e2e/protractor.conf.js","lines":{"begin":10,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 167**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"bfa59a62d27d6210eb2b9b8226a685fc","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":".history/e2e/protractor.conf_20200314113104.js","lines":{"begin":10,"end":35}},"remediation_points":3960000,"other_locations":[{"path":".history/e2e/protractor.conf_20200313155445.js","lines":{"begin":10,"end":35}},{"path":".history/e2e/protractor.conf_20200313162718.js","lines":{"begin":10,"end":35}},{"path":"e2e/protractor.conf.js","lines":{"begin":10,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 167**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"d324bdb66b9420a7cd5fcde1970e6d81","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"similar-code","description":"Similar blocks of code found in 4 locations. Consider refactoring.","categories":["Duplication"],"location":{"path":"e2e/protractor.conf.js","lines":{"begin":10,"end":35}},"remediation_points":3960000,"other_locations":[{"path":".history/e2e/protractor.conf_20200313155445.js","lines":{"begin":10,"end":35}},{"path":".history/e2e/protractor.conf_20200313162718.js","lines":{"begin":10,"end":35}},{"path":".history/e2e/protractor.conf_20200314113104.js","lines":{"begin":10,"end":35}}],"content":{"body":"## Duplicated Code\n\nDuplicated code can lead to software that is hard to understand and difficult to change. The Don't Repeat Yourself (DRY) principle states:\n\n> Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n\nWhen you violate DRY, bugs and maintenance problems are sure to follow. Duplicated code has a tendency to both continue to replicate and also to diverge (leaving bugs as two similar implementations differ in subtle ways).\n\n## Tuning\n\n**This issue has a mass of 167**.\n\nWe set useful threshold defaults for the languages we support but you may want to adjust these settings based on your project guidelines.\n\nThe threshold configuration represents the minimum [mass](https://docs.codeclimate.com/docs/duplication#mass) a code block must have to be analyzed for duplication. The lower the threshold, the more fine-grained the comparison.\n\nIf the engine is too easily reporting duplication, try raising the threshold. If you suspect that the engine isn't catching enough duplication, try lowering the threshold. The best setting tends to differ from language to language.\n\nSee [`codeclimate-duplication`'s documentation](https://docs.codeclimate.com/docs/duplication) for more information about tuning the mass threshold in your `.codeclimate.yml`.\n\n## Refactorings\n\n*   [Extract Method](http://sourcemaking.com/refactoring/extract-method)\n*   [Extract Class](http://sourcemaking.com/refactoring/extract-class)\n*   [Form Template Method](http://sourcemaking.com/refactoring/form-template-method)\n*   [Introduce Null Object](http://sourcemaking.com/refactoring/introduce-null-object)\n*   [Pull Up Method](http://sourcemaking.com/refactoring/pull-up-method)\n*   [Pull Up Field](http://sourcemaking.com/refactoring/pull-up-field)\n*   [Substitute Algorithm](http://sourcemaking.com/refactoring/substitute-algorithm)\n\n## Further Reading\n\n*   [Don't Repeat Yourself](http://c2.com/cgi/wiki?DontRepeatYourself) on the C2 Wiki\n*   [Duplicated Code](http://sourcemaking.com/refactoring/duplicated-code) on SourceMaking\n*   [Refactoring: Improving the Design of Existing Code](http://www.amazon.com/Refactoring-Improving-Design-Existing-Code/dp/0201485672) by Martin Fowler. _Duplicated Code_, p76\n"},"fingerprint":"2902d2a77f8060ed06d6e1e06e978b37","severity":"major","engine_name":"duplication"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":5,"column":1},"end":{"line":5,"column":1}}},"engine_name":"csslint","fingerprint":"f1f458a183cf415fe5b7472216f417f9","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":29,"column":3},"end":{"line":29,"column":3}}},"engine_name":"csslint","fingerprint":"0c06808b0ecd1b0067aa423163ce2138","severity":"minor"},{"type":"issue","check_name":"qualified-headings","description":"Heading (h2) should not be qualified.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":46,"column":14},"end":{"line":46,"column":14}}},"engine_name":"csslint","fingerprint":"f399cc258eaa21064bef6d4c8ab27b35","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":49,"column":3},"end":{"line":49,"column":3}}},"engine_name":"csslint","fingerprint":"0c06808b0ecd1b0067aa423163ce2138","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":63,"column":3},"end":{"line":63,"column":3}}},"engine_name":"csslint","fingerprint":"0c06808b0ecd1b0067aa423163ce2138","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":75,"column":5},"end":{"line":75,"column":5}}},"engine_name":"csslint","fingerprint":"0c06808b0ecd1b0067aa423163ce2138","severity":"minor"},{"type":"issue","check_name":"errors","description":"Expected SEMICOLON at line 92, col 62.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183045.css","positions":{"begin":{"line":92,"column":62},"end":{"line":92,"column":62}}},"engine_name":"csslint","fingerprint":"6751a6abdb47dc510361c38b3fb82c78","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":5,"column":1},"end":{"line":5,"column":1}}},"engine_name":"csslint","fingerprint":"3b74cb740ee3c3dd20053e49f7a79580","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":29,"column":3},"end":{"line":29,"column":3}}},"engine_name":"csslint","fingerprint":"50657fadafb329b3cd39c3945c7a5263","severity":"minor"},{"type":"issue","check_name":"qualified-headings","description":"Heading (h2) should not be qualified.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":46,"column":14},"end":{"line":46,"column":14}}},"engine_name":"csslint","fingerprint":"3546aa54b5e6bc45e401aae19e9d1a08","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":49,"column":3},"end":{"line":49,"column":3}}},"engine_name":"csslint","fingerprint":"50657fadafb329b3cd39c3945c7a5263","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":63,"column":3},"end":{"line":63,"column":3}}},"engine_name":"csslint","fingerprint":"50657fadafb329b3cd39c3945c7a5263","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":".history/src/assets/css/carousel_20200306183339.css","positions":{"begin":{"line":75,"column":5},"end":{"line":75,"column":5}}},"engine_name":"csslint","fingerprint":"50657fadafb329b3cd39c3945c7a5263","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":1,"column":1},"end":{"line":1,"column":1}}},"engine_name":"csslint","fingerprint":"6a7d44ff57aba2cc503b3340e76ca719","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":5,"column":1},"end":{"line":5,"column":1}}},"engine_name":"csslint","fingerprint":"6a7d44ff57aba2cc503b3340e76ca719","severity":"minor"},{"type":"issue","check_name":"universal-selector","description":"The universal selector (*) is known to be slow.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":11,"column":4},"end":{"line":11,"column":4}}},"engine_name":"csslint","fingerprint":"2f41b75166ded2cfeb9b3b30dba71616","severity":"minor"},{"type":"issue","check_name":"universal-selector","description":"The universal selector (*) is known to be slow.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":11,"column":13},"end":{"line":11,"column":13}}},"engine_name":"csslint","fingerprint":"2f41b75166ded2cfeb9b3b30dba71616","severity":"minor"},{"type":"issue","check_name":"universal-selector","description":"The universal selector (*) is known to be slow.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":11,"column":1},"end":{"line":11,"column":1}}},"engine_name":"csslint","fingerprint":"2f41b75166ded2cfeb9b3b30dba71616","severity":"minor"},{"type":"issue","check_name":"box-sizing","description":"The box-sizing property isn't supported in IE6 and IE7.","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":14,"column":11},"end":{"line":14,"column":11}}},"engine_name":"csslint","fingerprint":"1d7b55ab502c418e4281645d508bf6ab","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":39,"column":1},"end":{"line":39,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":48,"column":3},"end":{"line":48,"column":3}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":49,"column":18},"end":{"line":49,"column":18}}},"engine_name":"csslint","fingerprint":"836c739bc6dfef772a83995f781a6f65","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":58,"column":1},"end":{"line":58,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (td.line-count) is overqualified, just use .line-count without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":80,"column":16},"end":{"line":80,"column":16}}},"engine_name":"csslint","fingerprint":"0a3b2289ce9ab13d565259af8b0e29aa","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":80,"column":1},"end":{"line":80,"column":1}}},"engine_name":"csslint","fingerprint":"4b0cd84ba07bd3a60648bc2db54df39f","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (td.line-coverage) is overqualified, just use .line-coverage without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":84,"column":16},"end":{"line":84,"column":16}}},"engine_name":"csslint","fingerprint":"0a3b2289ce9ab13d565259af8b0e29aa","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":84,"column":1},"end":{"line":84,"column":1}}},"engine_name":"csslint","fingerprint":"4b0cd84ba07bd3a60648bc2db54df39f","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (span.cline-any) is overqualified, just use .cline-any without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":90,"column":19},"end":{"line":90,"column":19}}},"engine_name":"csslint","fingerprint":"6741d4d8152e3b6701b90d25fe454388","severity":"minor"},{"type":"issue","check_name":"box-model","description":"Using width with padding can sometimes make elements larger than you expect.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":92,"column":5},"end":{"line":92,"column":5}}},"engine_name":"csslint","fingerprint":"3767c33a4da00c729bac4a42edd5116f","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":95,"column":1},"end":{"line":95,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":105,"column":1},"end":{"line":105,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":114,"column":5},"end":{"line":114,"column":5}}},"engine_name":"csslint","fingerprint":"5e5e4ce5e35bdf25b06281805bbee511","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":126,"column":1},"end":{"line":126,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":131,"column":29},"end":{"line":131,"column":29}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"empty-rules","description":"Rule is empty.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":132,"column":1},"end":{"line":132,"column":1}}},"engine_name":"csslint","fingerprint":"4186208f4339d44f9944708e007987a0","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":138,"column":28},"end":{"line":138,"column":28}}},"engine_name":"csslint","fingerprint":"da616a37cb3118eb686ac67653a2013f","severity":"minor"},{"type":"issue","check_name":"empty-rules","description":"Rule is empty.","categories":["Bug Risk"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":139,"column":1},"end":{"line":139,"column":1}}},"engine_name":"csslint","fingerprint":"4186208f4339d44f9944708e007987a0","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":141,"column":1},"end":{"line":141,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":156,"column":15},"end":{"line":156,"column":15}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .status-line.low","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":158,"column":13},"end":{"line":158,"column":13}}},"engine_name":"csslint","fingerprint":"d3528aa6f072cd6689df3761fb6c3de8","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .red.solid","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":158,"column":1},"end":{"line":158,"column":1}}},"engine_name":"csslint","fingerprint":"d3528aa6f072cd6689df3761fb6c3de8","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":162,"column":3},"end":{"line":162,"column":3}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .status-line.high","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":173,"column":1},"end":{"line":173,"column":1}}},"engine_name":"csslint","fingerprint":"d3528aa6f072cd6689df3761fb6c3de8","severity":"minor"},{"type":"issue","check_name":"adjoining-classes","description":"Adjoining classes: .status-line.medium","categories":["Compatibility"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":176,"column":1},"end":{"line":176,"column":1}}},"engine_name":"csslint","fingerprint":"d3528aa6f072cd6689df3761fb6c3de8","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":182,"column":33},"end":{"line":182,"column":33}}},"engine_name":"csslint","fingerprint":"5e5e4ce5e35bdf25b06281805bbee511","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":183,"column":17},"end":{"line":183,"column":17}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (span.cline-neutral) is overqualified, just use .cline-neutral without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":185,"column":1},"end":{"line":185,"column":1}}},"engine_name":"csslint","fingerprint":"6741d4d8152e3b6701b90d25fe454388","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":187,"column":1},"end":{"line":187,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (td.empty) is overqualified, just use .empty without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":187,"column":19},"end":{"line":187,"column":19}}},"engine_name":"csslint","fingerprint":"0a3b2289ce9ab13d565259af8b0e29aa","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":206,"column":5},"end":{"line":206,"column":5}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":208,"column":1},"end":{"line":208,"column":1}}},"engine_name":"csslint","fingerprint":"90006f4535e3e85a8bdc2c76241a61ae","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (pre.prettyprint) is overqualified, just use .prettyprint without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":208,"column":1},"end":{"line":208,"column":1}}},"engine_name":"csslint","fingerprint":"82faf3b751fb356fcb904232080405b8","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":209,"column":5},"end":{"line":209,"column":5}}},"engine_name":"csslint","fingerprint":"1a5d91e267d3129ebfa8be2335d21538","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":210,"column":5},"end":{"line":210,"column":5}}},"engine_name":"csslint","fingerprint":"01c062759fc369bc4810f04bf5d9dd82","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":211,"column":5},"end":{"line":211,"column":5}}},"engine_name":"csslint","fingerprint":"da616a37cb3118eb686ac67653a2013f","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":213,"column":8},"end":{"line":213,"column":8}}},"engine_name":"csslint","fingerprint":"5e5e4ce5e35bdf25b06281805bbee511","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":216,"column":1},"end":{"line":216,"column":1}}},"engine_name":"csslint","fingerprint":"55e078fb59c57fb5ce6a55804b1029c2","severity":"minor"},{"type":"issue","check_name":"important","description":"Use of !important","categories":["Complexity"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/base.css","positions":{"begin":{"line":218,"column":3},"end":{"line":218,"column":3}}},"engine_name":"csslint","fingerprint":"ef85224c1cb8b91fb7e8b90ae09c5770","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":470},"end":{"line":1,"column":470}}},"engine_name":"csslint","fingerprint":"f72fe95e985fcf680c52f2da8caacdfc","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":520},"end":{"line":1,"column":520}}},"engine_name":"csslint","fingerprint":"8c62a9f946b6fba3d7bca96edbea4031","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (pre.prettyprint) is overqualified, just use .prettyprint without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":470},"end":{"line":1,"column":470}}},"engine_name":"csslint","fingerprint":"01338adb63be6a0416680f957f70e800","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (ol.linenums) is overqualified, just use .linenums without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":520},"end":{"line":1,"column":520}}},"engine_name":"csslint","fingerprint":"33c17ca2d97d4fbc306f75af4ff1a229","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (li.L0) is overqualified, just use .L0 without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":561},"end":{"line":1,"column":561}}},"engine_name":"csslint","fingerprint":"4a394b5dd77e7f8f37d1c60dd2d75ceb","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (li.L2) is overqualified, just use .L2 without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":573},"end":{"line":1,"column":573}}},"engine_name":"csslint","fingerprint":"4a394b5dd77e7f8f37d1c60dd2d75ceb","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (li.L6) is overqualified, just use .L6 without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":591},"end":{"line":1,"column":591}}},"engine_name":"csslint","fingerprint":"4a394b5dd77e7f8f37d1c60dd2d75ceb","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (li.L8) is overqualified, just use .L8 without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":603},"end":{"line":1,"column":603}}},"engine_name":"csslint","fingerprint":"4a394b5dd77e7f8f37d1c60dd2d75ceb","severity":"minor"},{"type":"issue","check_name":"overqualified-elements","description":"Element (li.L9) is overqualified, just use .L9 without element name.","categories":["Performance"],"remediation_points":50000,"location":{"path":"coverage/alpha-frontend/prettify.css","positions":{"begin":{"line":1,"column":654},"end":{"line":1,"column":654}}},"engine_name":"csslint","fingerprint":"4a394b5dd77e7f8f37d1c60dd2d75ceb","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":5,"column":1},"end":{"line":5,"column":1}}},"engine_name":"csslint","fingerprint":"f571c7f3ea0767ccc0a86a48edef067f","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":29,"column":3},"end":{"line":29,"column":3}}},"engine_name":"csslint","fingerprint":"cec661c1744642b1fd345251696285c1","severity":"minor"},{"type":"issue","check_name":"qualified-headings","description":"Heading (h2) should not be qualified.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":46,"column":14},"end":{"line":46,"column":14}}},"engine_name":"csslint","fingerprint":"8925fee631b7023e3f04b615ba02f720","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":49,"column":3},"end":{"line":49,"column":3}}},"engine_name":"csslint","fingerprint":"cec661c1744642b1fd345251696285c1","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":63,"column":3},"end":{"line":63,"column":3}}},"engine_name":"csslint","fingerprint":"cec661c1744642b1fd345251696285c1","severity":"minor"},{"type":"issue","check_name":"order-alphabetical","description":"Rule doesn't have all its properties in alphabetical order.","categories":["Style"],"remediation_points":50000,"location":{"path":"src/assets/css/carousel.css","positions":{"begin":{"line":75,"column":5},"end":{"line":75,"column":5}}},"engine_name":"csslint","fingerprint":"cec661c1744642b1fd345251696285c1","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"e2e/protractor.conf.js","positions":{"begin":{"line":30,"column":5},"end":{"line":30,"column":5}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"9267dd040b22b2515240341853e03db6","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"e2e/protractor.conf.js","positions":{"begin":{"line":31,"column":16},"end":{"line":31,"column":16}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"9267dd040b22b2515240341853e03db6","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":9,"column":7},"end":{"line":9,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":10,"column":7},"end":{"line":10,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":11,"column":7},"end":{"line":11,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":12,"column":7},"end":{"line":12,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":13,"column":7},"end":{"line":13,"column":7}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"},{"type":"issue","categories":["Clarity"],"check_name":"global-require","description":"Unexpected require().","content":{"body":"# Enforce require() on the top-level module scope (global-require)\n\nIn Node.js, module dependencies are included using the `require()` function, such as:\n\n```js\nvar fs = require(\"fs\");\n```\n\nWhile `require()` may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:\n\n```js\nfunction foo() {\n\n    if (condition) {\n        var fs = require(\"fs\");\n    }\n}\n```\n\nSince `require()` does a synchronous load, it can cause performance problems when used in other locations.\n\nFurther, ES6 modules mandate that `import` and `export` statements can only occur in the top level of the module's body.\n\n## Rule Details\n\nThis rule requires all calls to `require()` to be at the top level of the module, similar to ES6 `import` and `export` statements, which also can occur only at the top level.\n\nExamples of **incorrect** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n/*eslint-env es6*/\n\n// calling require() inside of a function is not allowed\nfunction readFile(filename, callback) {\n    var fs = require('fs');\n    fs.readFile(filename, callback)\n}\n\n// conditional requires like this are also not allowed\nif (DEBUG) { require('debug'); }\n\n// a require() in a switch statement is also flagged\nswitch(x) { case '1': require('1'); break; }\n\n// you may not require() inside an arrow function body\nvar getModule = (name) => require(name);\n\n// you may not require() inside of a function body as well\nfunction getModule(name) { return require(name); }\n\n// you may not require() inside of a try/catch block\ntry {\n    require(unsafeModule);\n} catch(e) {\n    console.log(e);\n}\n```\n\nExamples of **correct** code for this rule:\n\n```js\n/*eslint global-require: \"error\"*/\n\n// all these variations of require() are ok\nrequire('x');\nvar y = require('y');\nvar z;\nz = require('z').initialize();\n\n// requiring a module and using it in a function is ok\nvar fs = require('fs');\nfunction readFile(filename, callback) {\n    fs.readFile(filename, callback)\n}\n\n// you can use a ternary to determine which module to require\nvar logger = DEBUG ? require('dev-logger') : require('logger');\n\n// if you want you can require() at the end of your module\nfunction doSomethingA() {}\nfunction doSomethingB() {}\nvar x = require(\"x\"),\n    z = require(\"z\");\n```\n\n## When Not To Use It\n\nIf you have a module that must be initialized with information that comes from the file-system or if a module is only used in very rare situations and will cause significant overhead to load it may make sense to disable the rule. If you need to `require()` an optional dependency inside of a `try`/`catch`, you can disable this rule for just that dependency using the `// eslint-disable-line global-require` comment.\nSource: http://eslint.org/docs/rules/\n"},"location":{"path":"karma.conf.js","positions":{"begin":{"line":19,"column":12},"end":{"line":19,"column":12}}},"remediation_points":50000,"engine_name":"eslint","fingerprint":"475bc1aa692f5be47db0c8f34b62ef33","severity":"minor"}]
