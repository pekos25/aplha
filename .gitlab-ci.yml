image: docker:latest
include:
  - template: Code-Quality.gitlab-ci.yml

variables:
  IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG
  DOMAIN: itspektar.net

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules

before_script:
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
    - if [ $CI_COMMIT_REF_SLUG == "master" ]; then BUILD_ARGS=--prod; fi
    - docker build --build-arg BUILD_ARGS=$BUILD_ARGS --tag $IMAGE .
    - docker push $IMAGE

deploy_review:
  stage: deploy
  script:
    - echo "Create service $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    - docker pull $IMAGE
    - docker service rm $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG || true
    - docker service create
      --name $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
      --publish 80
      --network traefik-public
      --label "traefik.frontend.rule=Host:$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.itspektar.net"
      --label "traefik.port=80"
      --label "traefik.backend.loadbalancer.swarm=true"
      --label "traefik.enable=true"
      --label "traefik.tags=traefik-public"
      --label "traefik.docker.network=traefik-public"
      --label "traefik.webservice.frontend.entryPoints=http,https"
      --detach
      --placement-pref 'spread=node.hostname'
      --constraint 'node.hostname==node'
      $IMAGE
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$DOMAIN
  when: on_success
  tags:
    - itspektar.net
  only:
    - branches
  except:
    - master

deploy_node:
  stage: deploy
  script:
    - echo "Create service $CI_PROJECT_NAME"
    - docker pull $IMAGE
    - docker service rm $CI_PROJECT_NAME || true
    - docker service create
      --name $CI_PROJECT_NAME
      --publish 80
      --network traefik-public
      --label "traefik.frontend.rule=Host:$CI_PROJECT_NAME.$DOMAIN"
      --label "traefik.port=80"
      --label "traefik.backend.loadbalancer.swarm=true"
      --label "traefik.enable=true"
      --label "traefik.tags=traefik-public"
      --label "traefik.docker.network=traefik-public"
      --label "traefik.webservice.frontend.entryPoints=http,https"
      --detach --placement-pref 'spread=node.hostname'
      --constraint 'node.hostname==node'
      $IMAGE
  environment:
    name: $CI_PROJECT_NAME
    url: https://$CI_PROJECT_NAME.$DOMAIN
  when: on_success
  tags:
    - itspektar.net
  only:
    - master

stop_node:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Remove service $CI_PROJECT_NAME"
    - docker service rm $CI_PROJECT_NAME || true
  when: manual
  tags:
    - itspektar.net
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - master

stop_review:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Remove service $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG"
    - docker service rm $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG || true
  when: manual
  tags:
    - itspektar.net
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  except:
    - master

code_quality:
  allow_failure: true
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
      --env SOURCE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
